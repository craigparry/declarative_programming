(define test '(1 2 3 4 5))

(define list-reduce 
  (lambda args
    (foldr cons '() args)))
(equal? (apply list-reduce test) test)

(define +-reduce
  (lambda args
    (foldr (lambda (x ls) (+ x ls)) 0 args)
    )
)
(equal? (apply +-reduce test) (apply + test))

(define filter-reduce
  (lambda (pred? . args) 
    (foldr (lambda (x ls) (if (pred? x) (cons x ls) ls)) '() args) 
    )
 )
(equal? (apply filter-reduce (cons even? test)) (filter even? test))

(define map-reduce
  (lambda (f ls)
    (foldr)
    )
)
(equal? (map-reduce odd? test) (map odd? test))